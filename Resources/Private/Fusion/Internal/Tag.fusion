prototype(Carbon.IncludeAssets:Internal.Tag) < prototype(Neos.Fusion:Component) {
    path = ${null}
    fileObject = ${null}
    cacheBuster = false

    @private {
        async = ${props.fileObject.async}
        defer = ${props.fileObject.defer}
        external = ${props.fileObject.external}
        search = ${props.fileObject.search}
        attributes = ${props.fileObject.attributes}
        uri = Neos.Fusion:Case {
            isExternal {
                condition = ${private.external}
                renderer = ${props.path + private.search}
            }
            isInternal {
                condition = true
                renderer = Neos.Fusion:Join {
                    uri = Neos.Fusion:ResourceUri {
                        path = ${props.path}
                    }
                    search = ${private.search}
                    cacheBuster = Neos.Fusion:Value {
                        @if.needCacheBuster = ${props.cacheBuster}
                        divider = ${private.search ? '&' : '?'}
                        hash = ${Carbon.FileContent.pathHash(props.path)}
                        value = ${String.isBlank(this.hash) ? '' : this.divider + 'h=' + this.hash}
                    }
                }
            }
        }
    }

    renderer = Neos.Fusion:Join {
        @if.render = ${props.fileObject && private.uri}
    }
}

prototype(Carbon.IncludeAssets:Internal.Tag.ResourceHint) < prototype(Carbon.IncludeAssets:Internal.Tag) {
    async = false
    rel = ${null}
    disableCacheBusterForPreloadAsset = true
    cacheBuster.@process.disableForPreloadasset = ${this.disableCacheBusterForPreloadAsset && this.fileObject && this.fileObject.type == 'PRELOADASSET' ? false : value}
    @if.hasRel = ${this.rel}
    renderer.resourceHint = ${'<link rel="' + props.rel + '" href="' + private.uri + '"' + private.attributes +' />'}
}

prototype(Carbon.IncludeAssets:Internal.Tag.JS) < prototype(Carbon.IncludeAssets:Internal.Tag) {
    renderer.script = ${'<script src="' + private.uri + '"' + (private.async ? ' async' : '') + (private.defer ? ' defer' : '') + private.attributes +'></script>'}
}

prototype(Carbon.IncludeAssets:Internal.Tag.CSS) < prototype(Carbon.IncludeAssets:Internal.Tag) {
    renderer.css = ${private.async || private.defer ? '<link rel="preload" as="style" onload="this.onload=null;this.rel=\'stylesheet\'" onerror="this.onload()"' + props.fileObject.attributes + ' href="' + private.uri + '" />' : '<link rel="stylesheet" href="' + private.uri + '"' + private.attributes + ' />'}
}
