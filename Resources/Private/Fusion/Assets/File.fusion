prototype(Carbon.IncludeAssets:File) < prototype(Neos.Fusion:Case) {
	file = ${file}
	extension = ''
	assetResourceFolder = ${assetResourceFolder ? assetResourceFolder : String.indexOf(this.file, '//') != -1 ? true : false}

	@ignoreProperties = ${['file','extension','assetResourceFolder']}
	@if.hasAttributes = ${this.assetResourceFolder ? true : false}

	@context {
		extension = ${this.extension ? '.' + this.extension : ''}
		resourceFolder = ${this.assetResourceFolder}
		filename = ${this.file}
	}

	isInternal {
		condition = ${String.endsWith(filename, '[inline]')}
		renderer = Neos.Fusion:Case {
			isCss {
				condition = ${extension == '.css' ? true : false}
				renderer = Carbon.IncludeAssets:InlineStyle {
					filename = ${String.replace(filename, '[inline]', '')}
				}
			}
			default {
				condition = true
				renderer = Carbon.IncludeAssets:InlineScript {
					filename = ${String.replace(filename, '[inline]', '')}
				}
			}
		}
	}
	isFile {
		condition = true
		renderer = Neos.Fusion:Collection {
			collection = ${filename ? String.split(String.replace(String.trim(filename), ']', ''), '[') : []}
			iterationName = 'iterator'
			itemName = 'entry'
			itemRenderer = Neos.Fusion:Case {
				isFilename {
					condition = ${iterator.isFirst}
					renderer = Neos.Fusion:Case {
						isExternal {
							condition = ${String.indexOf(entry, '//') != -1}
							renderer = ${entry}
						}
						isInternal {
							condition = ${entry}
							renderer = Neos.Fusion:Array {
								@context.asset = ${'resource://' + resourceFolder + '/' + entry + extension}
								file = Neos.Fusion:ResourceUri {
									path = ${asset}
								}
								hash = Carbon.IncludeAssets:VersionOfAsset
							}
						}
						@process.wrap = ${' ' + (extension == '.css' ? 'href' : 'src') + '="' + value + '"'}
					}
				}
				areAttributes {
					condition = ${entry}
					renderer = ${' ' + String.trim(entry)}
				}
			}
			@process.addTag = ${value ? extension == '.css' ? Configuration.setting('Carbon.IncludeAssets.LoadCSSAsynchron') ? '<link rel="preload"' + value + ' as="style" onload="this.rel=\'stylesheet\'" onerror="this.rel=\'stylesheet\'" /><noscript><link rel="stylesheet"' + value + ' /></noscript>' : '<link rel="stylesheet"' + value + ' />' : '<script' + value + '></script>' : ''}
		}
	}
}
