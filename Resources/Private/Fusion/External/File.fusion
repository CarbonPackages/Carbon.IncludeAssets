/**
 * This prototype outputs the tag for inlcuding JS, MJS or CSS
 */

prototype(Carbon.IncludeAssets:File) < prototype(Neos.Fusion:Component) {
    file = null
    assetPackage = ${node.context.currentSite.siteResourcesPackageKey}
    cacheBuster = ${Configuration.setting('Carbon.IncludeAssets.Default.CacheBuster')}
    assetPath = null

    // This is a internal variable, please use `assetPath` for an single file
    paths = ${Configuration.setting('Carbon.IncludeAssets.Default.Path')}

    renderer = Neos.Fusion:Component {
        @if.render = ${props.file}

        file = ${props.file}
        assetPackage = ${props.assetPackage}
        cacheBuster = ${props.cacheBuster}
        assetPath = ${props.assetPath ? props.assetPath : props.paths[this.assetKey][this.type]}

        fileObject = ${Carbon.IncludeAssets.parseFilename(props.file)}
        assetKey = ${this.fileObject.inline ? 'Inline' : 'File'}
        type = ${this.fileObject.type}
        path = ${this.fileObject.external || this.fileObject.path ? this.fileObject.filename : this.assetPackage && this.assetPath ? 'resource://' + this.assetPackage + '/' + this.assetPath + '/' + this.fileObject.filename : false}

        renderer = Neos.Fusion:Case {
            @if.render = ${props.path ? true : false}

            inlineFile {
                condition = ${props.fileObject.inline}
                renderer = Neos.Fusion:Component {
                    @context {
                        attributes = ${props.fileObject.attributes}
                        path = ${props.path}
                        type = ${props.type}
                    }
                    renderer = Carbon.IncludeAssets:Internal.InlineFile
                }
            }

            isFile {
                condition = ${props.path ? true : false}
                renderer = Carbon.IncludeAssets:Internal.TypeCase {
                    type = ${props.type}
                    css = afx`
                        <Carbon.IncludeAssets:Internal.Tag.CSS path={props.path} fileObject={props.fileObject} cacheBuster={props.cacheBuster} async={this.fileObject.async ? node.context.live : false} />
                    `
                    js = afx`
                        <Carbon.IncludeAssets:Internal.Tag.JS path={props.path} fileObject={props.fileObject} cacheBuster={props.cacheBuster} />
                    `
                    preload = afx`
                        <Carbon.IncludeAssets:Internal.Tag.ResourceHint rel='preload' path={props.path} fileObject={props.fileObject} cacheBuster={props.cacheBuster} />
                    `
                    modulePreload = afx`
                        <Carbon.IncludeAssets:Internal.Tag.ResourceHint rel='modulepreload' path={props.path} fileObject={props.fileObject} cacheBuster={props.cacheBuster} />
                    `
                }
            }
        }
    }
}
