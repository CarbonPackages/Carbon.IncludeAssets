prototype(Carbon.IncludeAssets:File) < prototype(Neos.Fusion:Case) {
    file = null
    fileObject = ${Carbon.IncludeAssets.parseFilename(this.file)}
    type = ${this.fileObject.type}
    @if.render = ${this.fileObject ? true : false}

    config = ${Configuration.setting('Carbon.IncludeAssets')}
    cacheBuster = ${this.config.CacheBuster}
    assetPackage = ${this.config.AssetPackage ? this.config.AssetPackage : node.context.currentSite.siteResourcesPackageKey}
    assetKey = ${this.fileObject.inline ? 'Inline' : 'File'}
    assetPath = ${this.config.Path[this.assetKey][this.type]}
    path = ${this.fileObject.external || this.fileObject.path ? this.fileObject.filename : this.assetPackage && this.assetPath ? 'resource://' + this.assetPackage + '/' + this.assetPath + '/' + this.fileObject.filename : false}

    @context {
        fileObject = ${this.fileObject}
        type = ${this.type}
        cacheBuster = ${this.cacheBuster}
        path = ${this.path}
    }

    @ignoreProperties = ${['file','fileObject','type','config','cacheBuster','assetPackage','assetKey','assetPath','path']}

    inlineFile {
        condition = ${fileObject.inline}
        renderer = Carbon.FileContent:FileContent {
            path = ${path}
            @process.wrapWithTag = Carbon.IncludeAssets:TypeCase {
                isCSS.renderer = ${'<style' + fileObject.attributes +'>' + value + '</style>'}
                isJS.renderer = ${'<script' + fileObject.attributes +'>' + value + '</script>'}
            }
        }
    }
    isFile {
        condition = ${path ? true : false}
        renderer = Carbon.IncludeAssets:TypeCase {
            @context {
                isLiveAndAsync = ${fileObject.async ? node.context.live : false}
                linkToFile = Neos.Fusion:Case {
                    isExternal {
                        condition = ${fileObject.external}
                        renderer = ${path + fileObject.search}
                    }
                    isInternal {
                        condition = true
                        renderer = Neos.Fusion:Array {
                            file = Neos.Fusion:ResourceUri {
                                path = ${path}
                            }
                            search = ${fileObject.search}
                            hash = Carbon.IncludeAssets:VersionOfAsset {
                                isFirst = ${fileObject.search ? false : true}
                                path = ${path}
                                @if.needCacheBuster = ${cacheBuster}
                            }
                        }
                    }
                }
            }

            isCSS.renderer = Neos.Fusion:Array {
                asyncOpen = ${'<link rel="preload" href="' + linkToFile + '" as="style" onload="this.onload=null;this.rel=\'stylesheet\'" onerror="this.onload()"' + fileObject.attributes + ' /><noscript>'}
                asyncOpen.@if.render = ${isLiveAndAsync}
                cssFile = ${'<link rel="stylesheet" href="' + linkToFile + '"' + fileObject.attributes + ' />'}
                asyncClose = '</noscript>'
                asyncClose.@if.render = ${isLiveAndAsync}
            }

            isJS.renderer = ${'<script src="' + linkToFile + '"' + (fileObject.async ? ' async' : '') + fileObject.attributes +'></script>'}
        }
    }
}
