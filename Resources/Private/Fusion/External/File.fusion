/**
 * This prototype outputs the tag for including HTML, JS, MJS or CSS
 */

prototype(Carbon.IncludeAssets:File) < prototype(Neos.Fusion:Component) {
    @propTypes {
        file = ${PropTypes.string}
        assetPackage = ${PropTypes.string}
        cacheBuster = ${PropTypes.boolean}
        disableCacheBusterForPreloadAsset = ${PropTypes.boolean}
        assetPath = ${PropTypes.string}
        wrapper = ${PropTypes.string}
    }

    file = ${null}
    assetPackage = Carbon.IncludeAssets:SiteResourcesPackageKey
    cacheBuster = ${Configuration.setting('Carbon.IncludeAssets.Default.CacheBuster')}
    disableCacheBusterForPreloadAsset = ${Configuration.setting('Carbon.IncludeAssets.Default.DisableCacheBusterForPreloadAsset')}
    assetPath = ${null}
    wrapper = ${null}

    inBackend = Carbon.IncludeAssets:InBackend

    @if.fileIsSet = ${this.file}

    @private {
        paths = ${Configuration.setting('Carbon.IncludeAssets.Default.Path')}
        fileObject = ${Carbon.IncludeAssets.parseFilename(props.file)}
        assetKey = ${private.fileObject.inline ? 'Inline' : 'File'}
        type = ${private.fileObject.type}
        isPlain = ${private.type == 'PLAIN'}
        finalAssetPath = ${props.assetPath || private.paths[private.assetKey][private.type]}
        path = ${private.fileObject.external || private.fileObject.path ? private.fileObject.filename : props.assetPackage && private.finalAssetPath ? 'resource://' + props.assetPackage + '/' + private.finalAssetPath + '/' + private.fileObject.filename : false}
        path.@if.isNotPlain = ${!private.isPlain}
    }

    renderer = Neos.Fusion:Case {
        @if.hasPath = ${private.isPlain || private.path}
        @process.wrapper = Carbon.IncludeAssets:Internal.Wrapper {
            wrapper = ${props.wrapper}
        }

        isPlain {
            condition = ${private.isPlain}
            renderer = ${private.fileObject.markup}
        }

        inlineFile {
            condition = ${private.fileObject.inline}
            renderer = Carbon.IncludeAssets:Internal.InlineFile {
                attributes = ${private.fileObject.attributes}
                path = ${private.path}
                type = ${private.type}
            }
        }

        isFile {
            condition = ${private.path ? true : false}
            renderer = Carbon.IncludeAssets:Internal.TypeCase {
                type = ${private.type}
                css = Carbon.IncludeAssets:Internal.Tag.CSS {
                    path = ${private.path}
                    fileObject = ${private.fileObject}
                    cacheBuster = ${props.cacheBuster}
                    async = ${private.fileObject.async ? !props.inBackend : false}
                }
                js = Carbon.IncludeAssets:Internal.Tag.JS {
                    path = ${private.path}
                    fileObject = ${private.fileObject}
                    cacheBuster = ${props.cacheBuster}
                }
                preload = Carbon.IncludeAssets:Internal.Tag.ResourceHint {
                    rel = 'preload'
                    path = ${private.path}
                    fileObject = ${private.fileObject}
                    cacheBuster = ${props.cacheBuster}
                    disableCacheBusterForPreloadAsset = ${props.disableCacheBusterForPreloadAsset}
                }
                modulePreload = Carbon.IncludeAssets:Internal.Tag.ResourceHint {
                    rel = 'modulepreload'
                    path = ${private.path}
                    fileObject = ${private.fileObject}
                    cacheBuster = ${props.cacheBuster}
                }
            }
        }
    }
}
